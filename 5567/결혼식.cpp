#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;


int friends[501][501];
bool isVisit[501];

int answer;
int N, M;
void BFS() {
	queue<pair<int, int>> q;
	q.push({ 1,0 });
	isVisit[1] = true;

	int frontFirst, frontSecond;
	while (!q.empty()) {
		frontFirst = q.front().first;
		frontSecond = q.front().second;
		q.pop();

		if (frontSecond >= 2) continue;
		for (int i = 2; i <= N; i++) {
			if (friends[frontFirst][i] == 1 && !isVisit[i]) {
				answer++;
				isVisit[i] = true;
				q.push({ i,frontSecond + 1 });
			}
		}
	}
}
int main() {
	cin >> N >> M;

	int first, second;
	for (int i = 1; i <= M; i++) {
		cin >> first >> second;
		friends[first][second] = friends[second][first] = 1;
	}
	
	BFS();
	cout << answer;
}
/*
10
10
4 10
7 10
3 7
6 8
1 7
1 6
1 5
1 9
2 4
3 8
 = 7

 50
200
24 40
17 20
23 27
38 46
31 47
11 16
15 21
29 49
11 29
34 42
18 43
15 44
13 50
2 50
16 36
6 27
13 40
17 23
12 39
40 49
40 41
16 37
14 30
37 38
1 39
16 43
22 37
40 45
32 34
37 41
7 23
12 13
7 9
11 43
21 40
1 7
13 33
21 37
18 44
5 22
32 41
3 15
7 39
6 46
4 8
6 41
2 29
1 48
17 44
3 20
13 18
23 40
18 19
10 23
27 47
2 43
22 33
23 39
46 50
24 47
10 25
29 38
18 36
25 29
6 21
22 23
10 44
28 37
28 42
7 8
21 38
31 48
18 29
15 22
38 40
21 24
10 29
2 4
18 21
45 48
12 27
20 42
4 7
4 35
47 49
31 44
13 24
8 11
39 47
30 40
8 29
1 45
7 38
27 32
24 39
4 34
34 41
21 48
19 29
13 25
6 13
1 33
19 38
16 18
13 28
9 47
9 22
34 36
7 12
27 45
16 19
37 47
38 41
23 37
6 43
17 41
11 44
44 50
5 33
4 20
15 36
14 38
17 21
17 40
17 18
3 45
29 32
10 41
19 24
11 38
13 16
6 11
26 47
25 35
26 49
19 27
20 39
30 32
1 37
18 26
17 31
4 47
22 49
39 46
10 16
19 28
19 49
18 45
36 44
11 18
38 39
11 41
3 35
8 43
21 34
17 32
13 36
21 41
25 43
21 32
17 45
8 48
27 49
34 40
4 50
23 50
25 33
16 35
36 45
31 38
24 31
13 48
25 38
11 17
20 29
9 12
8 31
15 17
12 18
21 26
6 48
18 31
12 40
24 28
21 46
7 43
23 47
22 44
4 41
17 26
1 49
1 18
7 27
2 8
9 50
18 38
22 25
17 46
25 47
35 46
 = 39
*/